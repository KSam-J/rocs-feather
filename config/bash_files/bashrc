# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color|alacritty) color_prompt=yes;;
esac

if [[ -n  "$TMUX" ]]; then
    color_prompt=yes
fi

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi


# Bash Prompt ########################################################
# Function that will list first letter of directories
_dir_chompB () {
    local p=${1/#$HOME/\~} b s
    local pstart=${1/#$HOME/\~}
    s=${#p}
    while [[ $p != "${p//\/}" ]]&&(($s>$2))
    do
        p=${p#/}
#        if [[ ${1%$p*} is empty ]] [[ $(ll ${1%$p*} | grep -s "\.git") ]]; then
#            b=$b/GIT
#        else
            [[ $p =~ \.?.[^/]{2}? ]]
            b=$b/${BASH_REMATCH[0]}
#        fi
        p=${p#*/}
        ((s=${#b}+${#p}))
    done
#    echo ${b/\/~/\~}${b+/}$p
    echo "${b/\/~/\~}${b+/}"
}

_dir_chompP () {
    local p=${1/#$HOME/\~} b s
    local pstart=${1/#$HOME/\~}
    s=${#p}
    while [[ $p != "${p//\/}" ]]&&(($s>$2))
    do
        p=${p#/}
#        if [[ ${1%$p*} is empty ]] [[ $(ll ${1%$p*} | grep -s "\.git") ]]; then
#            b=$b/GIT
#        else
            [[ $p =~ \.?.[^/]{2}? ]]
            b=$b/${BASH_REMATCH[0]}
#        fi
        p=${p#*/}
        ((s=${#b}+${#p}))
    done
#    echo ${b/\/~/\~}${b+/}$p
    echo "$p"
}

_shlevel () {
    if [[ $TMUX ]];then
        _shlvl=$(( ${SHLVL} - 1 ))
    else
        _shlvl=${SHLVL}
    fi

    if [[ ${_shlvl} -eq 2 ]]; then
        echo -n '^'
    elif [[ ${_shlvl} -gt 2 ]]; then
        echo -n "^$(( ${_shlvl} - 1 ))"
    fi
}

if [ "$color_prompt" = yes ]; then
#    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
# dir_chomp approach
    PS1='\[\033[01;32m\]$(hostnamectl --pretty)$(_shlevel):\[\033[01;34m\]$(_dir_chompB "$PWD" 20)$(_dir_chompP "$PWD" 20)\[\033[00m\]ó°›“ '
# ################################################################
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

is_command() {
    command -v $1 \
    && echo true \
    || echo false
}

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Enable printing of icons https://github.com/sebastiencs/icons-in-terminal.git
# source ~/.local/share/icons-in-terminal/icons_bash.sh

# Rust ----------------------
CARGO_ENV="$HOME/.cargo/env"
if [[ -e $CARGO_ENV ]]; then
    source "$CARGO_ENV"
else
    echo "$CARGO_ENV does not exist"
fi

## Alacritty -----------------
# Copy from <alacritty-repo>/extra/completions/alacritty.bash -> .config
if [[ -e ~/.config/alacritty/alacritty.bash ]]; then
    source ~/.config/alacritty/alacritty.bash
else
    echo 'Alacritty not set in bashrc'
fi

# FZF ---------------------------------------------------
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

if [[ $(is_command fzf) ]]; then
    # Keybinding and fuzzy auto completion
    # source /usr/share/doc/fzf/examples/key-bindings.bash
    # source /usr/share/doc/fzf/examples/completion.bash
    # export FZF_DEFAULT_COMMAND='fd --type f'
    # Use fd (https://github.com/sharkdp/fd) instead of the default find
    # command for listing path candidates.
    # - The first argument to the function ($1) is the base path to start traversal
    # - See the source code (completion.{bash,zsh}) for the details.
    _fzf_compgen_path() {
      fd --hidden --follow --exclude ".git" . "$1"
    }

    # Use fd to generate the list for directory completion
    _fzf_compgen_dir() {
      fd --type d --hidden --follow --exclude ".git" . "$1"
    }
else
    echo 'fzf not set in bashrc'
fi

# Flutter ----------------------------------------------
export CHROME_EXECUTABLE=/snap/bin/chromium

# History mods -----------------------------------------
export HISTCONTROL=ignoreboth
export HISTIGNORE="l:ls:la:ll:.."

# ForGit -----------------------------------------------
if [[ -e ~/Repos/forgit/bin/git-forgit ]]; then
    export FORGIT_INSTALL_DIR="$HOME/Repos/forgit"
    if [[ ! "${PATH}" =~ "$FORGIT_INSTALL_DIR/bin" ]]; then
        export PATH="$PATH:$FORGIT_INSTALL_DIR/bin"
    fi
else
    echo 'ForGit not set in bashrc'
fi

# ROCS-FEATHER -----------------------------------------
if [[ -n ${ROCS_PATH} ]]; then
    export PATH="${PATH}:${ROCS_PATH}/bin"
fi

# BAT Manpager ----------------------------------------
if [[ -x /usr/bin/bat ]]; then
    export MANPAGER="sh -c 'col -bx | bat -l man -p'"
else
    echo 'Bat not installed, manpager is boring'
fi

# UNTRACKED --------------------------------------------

